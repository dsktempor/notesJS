May 18th
1453 problems
E:407 (28%)
M:742 (51%)
H:304 (21%)

function leetcodeBinaryTreeBuilder(arr) {
	// [3, 5, 1, 6, 2, 9, 8, null, null, 7, 4]
	// [3, 5, 1, 6, 7, 4, 2, null, null, null, null, null, null, 9, 11, null, null, 8, 10]
	function Node(val,left=null,right=null) {
		return { val, left, right }
	}

	if(arr.length===0) return null;
	let root = new Node(arr.shift());
	let tree = [root];

	while(arr.length>0 && tree.length>0) {
		let n = tree.shift();
		if(n!==null) {
			let v;
			if(n.left===null) {
				v = arr.shift();
				if(v===null) n.left = null;
				else n.left = new Node(v);
				tree.push(n.left);
			}
			v = arr.shift();
			if(v===null) n.right = null;
			else n.right = new Node(v);
			tree.push(n.right);
		}
	}

	return root;
}


Caution
parseInt('00056') is 56
Number('00078') is 78, but Number() is much faster than parseInt()...
dont' forget the NEW keyword when calling constructors! var x = new Node(val,null);
don't do- for(k in Object.key(obj)), do for(k of Object.keys(obj))... same for Object.values();
s = 'temp'; s[1] = 'g'// this won't edit s!!! s will still be 'temp'. So don't reverse a string by changing its characters. Strings are immutable.
make sure the variable name is ALSO not a function name already.. make sure all variables and property names are distinct.
array.sort() does the sort in-place!! it does not return a new array
string  upperCase() and lowerCase() return new strings and don't edit in place
you can't do if() if() else   the else will go to the second if and not the first if... (this is when you don't use brackets)
make sure your === are not  =  or  ==      (common typo)
in recursive code, for loops, put LET i, and not just i
function dfs(n) {
		ret.push(n.val);
		for (let i = 0; i < n.children.length; i++) {  //note if you don't put LET i , it errors out !!!!!
			dfs(n.children[i]);
		}
}
you can't do let uCount,dCount,lCount,rCount = 0; You have to do each: let uCount=0,dCount=0,lCount=0,rCount = 0;
[1,2,3].concat(4,5,6) is [1,2,3,4,5,6]  // remember concat returns a new array
[1,2,3].push(...[4,5,6])  //doesnt work do .push(4,5,6)
licensePlate.replace(/[^a-zA-Z]/g,'');      //DONT forget the 'g' flag in regex
common mistake: in 2-D matrix, you always say grid[i,j] instead of grid[i][j] !! throws an error, Understand your nested-for-loops
IN a square 2-d matix. The two for loops are just counter for 0 to n. You can use a[i][j] OR a[j][i] inside it. See problem 0883
(34).toString.split('') is ['3','4'] and not [3,4]
In JS, if Arr = [10,20,30] A[-5] and A[50] are undefined (it won't throw an exception!!)
Problem1266. Be careful when passing array refs to functions. Like coordinates myFunc([1,2],[3,4]), inside your function make copies of the value incase you are editing them (or exchanging them etc)
for(x of IntegerArray) hm[x] = hm[x]+1 || 1;  for(y in hm) {} //here y is a string !! so it will be "3" and not 3. use "+y" to convert to number
Use s.repeat()  (string repeat)
Use arr.indexOf() and arr.lastIndexOf().


Programming Shortcuts
there are 26 alphabets in total.
ASCII: A-Z is 65-90 ; a-z is 97-122   someString.charCodeAt(someIndex)  ,  String.fromCharCode(65) - gives 'A'
32-bit signed integer range: [-2^31,  2^31 âˆ’ 1]. So (-1 * Math.pow(2, 31)) to (Math.pow(2, 31) - 1)
Use switch(xyz) instead of if(xyz)-elseIf(xyz)-elseIf(xyz)-elseIf(xyz).   Or do switch(true){}
hashmap counter: hm[n] = !hm[n] ? 1 : ++hm[n];
hashmap counter: hmp[n] = hm[n]+1 || 1;

convert binary number to string, use x.toString(2)  110100101 will become "110100101"
convert number to string, x.toString();
"5" - 0 is 5, so to convert String to number, just use minus sign, no need Number("5");
To create an empty 2d matrix of size R x C - let final = new Array(R).fill(0).map(x => new Array(C)); you have to do the fill(0) and then do the map x => new array .... or else x will be undefined and the map wont work
flatten a 2d matrix -> nums.reduce((acc, x) => acc.concat(x), []);
a XOR a = 0, a XOR 0 = a    ("exclusive or", result bit is one if only exactly one of the bits is set)
a ^ b ^ c ^ a ^ b = c
Use Array.from(), hashmap.entries(), hashmap.values(), hashmap.keys()  Example: let maxLength = Math.max(...Array.from(m.values()));
for ([key,value] of Object.entries(hm)){
		result.push("" + value + " " + key);
}
use of new Regexp: S.replace(new RegExp(J, 'g'),'');   where J = 'aA[0-9]' (or some string variable basically)
x = 1 - x (to flip 0 to 1 and 1 to 0)     or do  y => y^1  XOR
In JS you can do
let o = {};
o[[3,4]] = 10;     o : { "3,4":10 }
o[[-2,-6]] = 20;     o : { "3,4":10, "-2,-6":20 }
New way to find Math.floor(x/2);   do  x>>1;
To check if x is even, don't do x%2===0, do x & 1 === 0.  To check if x is odd, do x & 1 === 1   (the last bit is zero for an even number)
-6%2 is -0 and not 0 (so === won't work, if you are trying x%2===0)
To remove all '@' in a string. Do string.split('@').join('');   (or string.replace())
Use BigInt(somestring) to convert '5432342351412312131' to a valid number (else you will be out of bounds), don't use Number(someString)
How to kill a for loop without a break; ?
for(i=0;i<10;i++){
	if(abc) i=20;
}
Get used to << shift operator, problem 1018
if(root.left) {helper(root.left, curr);}    can be -    root.left && helper(root.left, curr);
New way to convert binary to decimal.  1010101 is 85. You read it left to right, you get sums: 1,2,5,10,21,42,85  (do curr=curr*2 + bit) curr starts with zero
Be careful with: let max = Math.max(...someArray);   (it wont work for large arrays) from docs of Math.max - both spread (...) and apply will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements as function parameters.
Linked Lists: Start with a dummy root node to get going. Then retun dummy.next to return the actual root node.
If you are comparing s[i] and s[i+1] in a loop, in the end s[i+1] will be undefined. So just add a dummy value to the end of the array/string. Example: For the given string '1211', i will make it '1211X'  (i know for sure that X will not be in the given string, so arbitrarily use X)
When reading backwards of two string, one of them might finish faster (smaller length string), in that case, you want to do - let aa = a[aEnd] || 0; let bb = b[bEnd] || 0; (0067 problem). Meaning if the value does not exist or undefined, then use 0.
Simultaneously traverse through two binary trees - dfs(root1,root2) {  return dfs(root1.left,root2.left) && dfs(root1.right,root2.right)}
Use Math.min(a,b,c,d,e) and Math.max(a,b,c,d,e)
In most problems, you loop through once to create a hash map. In the same loop, you can do your conditional checks (instead of doing it in a seperate loop) See 0169
To check if something is a an integer and not a fraction(decimal): x%1===0 . Example: Math.log2(x)%1===0 - to check if the number is an exact power of 2
You don't need two hashmaps/arrays. Just count +1 OR -1 and in the end check for zeroes. save space! prob #0242
String.replace can take a function! Reverse vovwels of a string - const vowels = s.match(/[aeiou]/ig); return s.replace(/[aeiou]/ig, () => vowels.pop());
Taylor Series - Square of any number can be represented by 1+3+...+(2n-1) = (2n-1 + 1)n/2 = nn. 1+3+5+7=16,  +9=25,  +11=36,  +13=49,  +15=64,  +17=81, +19=100
Subsequence and subarrays are two different things. #0392
Adding 1 to n-1 elements of an array is the same as subtracting 1 from just one element of the array. Use this technique of interpreation. #0453
Number of 1s in a binary num: num.toString(2).replace(/0/g,'').length
Instead of counting upwards, give each element the maximum score and then count downwards (it might be easier)#0463
Convert binary string to number:  parseInt(binaryString,2);
Learn to use mask bits: let mask = 1;  while (mask < num) mask = (mask << 1) | 1;  (meaning you will get 111111) #0476
The compliment of a number is 2*n - num - 1. So if the number is 3 (then the compliment is 8-3-1), if the number is 18 (the compliment is 32-18-1). I.e find the nearest greater power of 2. #0476
BST: If you traverse it inorder (meaning visit left, then visit current, then visit right), you will visit the node in ascending order.  #0530 #0501 #0538
if(word.toUpperCase() === word) return true;  //word is all capitals. (same for lowercase)
const isCapital = l => l>='A' && l<='Z';
DFS Iterative - #0538 (non recursive)
New way to traverse a m*n matrix -
	for(i=0;i<m*n;i++){
		matrixElem = matrix[Math.floor(i/n)][i%n];  //this is row traversal
		...
	}
Tree traversal: Inorder (Left, Root, Right), Preorder (Root, Left, Right), Postorder (Left, Right, Root)

regex -
remove non alpha-numerics:  s = s.replace(/[^a-zA-Z0-9]/g,'');  s.replace(/\W/g,'');
Match phone numbers [(xxx) xxx-xxxx or xxx-xxx-xxxx] -  /^(\(\d\d\d\) |\d\d\d-)\d\d\d-\d\d\d\d$/g
someString.match(/A/g) === null  (to check if there were no matches)
Dynamic Regex (#0551) - !new RegExp(`((A.*){${x}}|L{${y}})`).test(s); i.e string s must not contain more than x As and y consecutive Ls

array shortcuts-------
arr.sort((a,b)=>a-b);  If func return <0, a comes BEFORE b. If func returns >0, a comes AFTER b. If it returns zero, no change.
ascending sorting an integer array in JS-> nums1.sort((x,y)=>x-y);   //dont just do nums1.sort();
a.localeCompare(b) ; to compare strings. Use this in arrayOfStrings.sort(customCompareFunc);
Array.split(' '); does not need to be based on only one character, it can be any list of chars - const words = paragraph.toLowerCase().split(/[ !?',;.]/);
An element appears only once in an array, if indexOf() and lastIndexOf() are equal
Array.reduce to get the sum: A.reduce( (acc,x)=>acc+x, 0 )
arr.shift() is the same as arr.slice(1)  Except that shift does it in place and slice returns a new array.
Arr.push(), returns the length of the new array!  (after the push)
Quick copy of an array: let b = arr.slice(); or [...arr] or Array.from(arr)
Array.every(x=>true/false); //returns boolean
arr.splice(index, howMuchToRemove, whatToInsert);

Problem Solving Tricks
Use a hashmap to count frequency, store metadata.
Use a single hashmap for multiple strings/arrays and count +1 or -1 conditionally. In the end all the hm values with zeroes are useful. #0389
Loop through the strings/array(s) backwards or forwards
When looping through a list: either compare (curr,curr+1) or compare (curr-1,curr)
Sort the input array (nlogn time)
read from left or read from right.... (keep count of max and min on both sides)
create a set- let s = new Set(inputArray);
Try to use stacks in simple string, array problems.  Problem#0844
Maybe convert the number to a string? or an array of digits?
Binary search
Array Problems: Use a reading point and writing point. (two pointers)
Array: Start with the two ends of the array. Then slowly close-in towards the middle of the array. 0167
Store contextual data in each element of the stack/data-structure/hash-map... #0155-MinStack, #0219
Write a recursive function, but use a bunch of outer flags / outer variables..
Math probs: keep dividing the number by 3, 4 or 5 untill it reaches 1.
To find difference between sets/arrays - use XOR (zero memory). #0389
Use brute force, traverse through every possible solution.
Sometimes, the bounds of the problem is Math.sqrt(inputNum) #0492, #507
Use Regex.  #0500
Flatten the given 2D matrix
Closing window: a=left, b=right and then close in on the solution by doing a++ or --b.
Sliding window: start with a set of 5, do 5+right-left as you slide along the array.



Binary Trees and BSTs -
Run DFS (in-order,order,out-order)
Run BFS
Run DFS and pass info to the next layer.
Think of the DFS running on one middle node.. and write the code.

Questions to ask
Array/Object questions: should you solve it in place or can you return a new array/object.





To Do
Backtracking algos - https://www.youtube.com/watch?v=DKCbsiDBN6c
look at "trie" data structure problems, problem 1408
JS max heap: https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/discuss/523705/JavaScript-Heap-%2B-Binary-Search
learn the Date() api

Unclassified
instead of
scores.length-1 < 0 ? 0 : scores[scores.length-1] + (scores.length-2 < 0 ? 0 :scores[scores.length-2]);
do
(scores[scores.length-1] || 0) + (scores[scores.length-2] || 0)

Basic Logic / Formulae
#0938: In a BST, everything to the left of this node is lower than this node. Everything to the right of this node is greater than this node.
You don't have to always create a hashmap of chars of a string, maybe just do a.split('').sort().join(''). This value is unique for each string.
Heron's Formula: Area of triangle = Math.sqrt(s * s-a * s-b * s-c), where s=(a+b+c)/2
A triangle has a non-zero area, IF the sum of the two shorter sides is greater than the largest side.
Manhattan distance between two points in a plane = |x1-x2|+|y1-y2|
i.e you can only travel vertically or horizontally, so just count the number of city blocks you need to travel.. length wise and breadth wise...
counting permuations see #1128
1 2 3 4 5
perms are 1-2,1-3,1-4,1-5 | 2-3,2-4,2-5 | 3-4,3-5 | 4-5 = 10 perms
keep count to 0, when 1 comes count 0,
when 2 comes count 1, when 3 comes count 2, when 4 comes count 3 and finally count 4 for 5. total is 1+2+3+4


Common Algos-
dfs inorder traversal iteratively -
let stack = [];
while(root!==null || stack.length) {
	if(root!==null){
		stack.push(root);
		root = root.left;
	} else {
		root = stack.pop();

		//do something with root, you are visiting it now

		root = root.right;
	}
}

Boyer-Moore Voting Algorithm (#0169) (will give you the candidate if he has more than 50% votes)
var majorityElement = function(nums) {
	let count = 0, candidate = 0
	for (let num of nums) {
		if (count == 0) candidate = num;  //your count will come back to zero ONLY IF the candidate is not the majority...

		if(candidate===num) ++count;
		else --count;
	}
  return candidate
};

Sieve of Erasthones (#0204)
var countPrimes = function(n) {
	let hash = new Array(n).fill(true); //assume all n numbers are prime.
	hash[0] = false;
	hash[1] = false;
	for (let i=2;i*i<n;i++) {
		if (hash[i]) {
			for(let j=i*i;j<n;j+=i){ // p*(p+1)...
				hash[j] = false;
			}
		}
	}
	return hash.filter(x=>x).length;
};


GCD
function gcd(x,y) {
	if(x===0) return y;
	return gcd(y%x, x);
}

JS class syntax-
class RecentCounter {
	constructor(){
		this.arr = [];
	}
	ping(t){
		while (t-this.arr[0] > 3000) this.arr.shift();
		return queue.push(t);
	}
}

new kind of for-loop, problem 0999
for (const [xo, yo] of [[0, -1], [0, 1], [-1, 0], [1, 0]]) {
	for (let i = x + xo, j = y + yo; i < 8 && i >= 0 && j < 8 && j >= 0; i += xo, j += yo) {
		if (board[i][j] === "B") break;
		if (board[i][j] === "p") { ++ret; break; }
	}
}

tribonacci memozied
var tribonacci = function(n, cache={}) {
    if(n===0) return 0;
    if(n===1 || n===2) return 1;

    if(cache[n]) return cache[n];
    cache[n]=tribonacci(n-1, cache) + tribonacci(n-2, cache) + tribonacci(n-3, cache);
    return cache[n];
};

Code to check leap year
let leapYear = false;
if (year % 4 == 0) {
	if (year % 400 === 0) leapYear = true;
	else if (year % 100 === 0) leapYear = false;
	else leapYear = true;
}

//3 points in straight line (x1,y1) (x2,y2) (x3,y3)
function checkSlope(x,y,z){
		let slope1 = (y[1] - x[1]) / (y[0] - x[0]);
		let slope2 = (z[1] - y[1]) / (z[0] - y[0]);
		if(Math.abs(slope1)===Infinity && Math.abs(slope2)===Infinity) return true;
		else return slope1===slope2;
	}
Example (0,1)(1,3)(2,5) are in a straight line of slope +2. For every move of x, y moves by +2
(0,7)(1,5)(2,3) are in a straight line of slope -2.
(0,1)(0,0)(0,-1) are in a straight line of slope Infinity

//basic dfs traversal algo -
let array = [];
function dfs(n) {
	array.push(n);
	if (n.left !== null) dfs(n.left);
	if (n.right !== null) dfs(n.right);
}
dfs(root);
return array;

//dfs iterative
function dfs(n){
	let arr = [n];
	while(n.length>0){
		let p = arr.pop();
		p.val;
		if(p.right) arr.push(p.right);
		if(p.left) arr.push(p.left);  //so left will be popped first
	}
}



















